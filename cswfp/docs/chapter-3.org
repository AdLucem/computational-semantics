#+TITLE: Functional Programming and Haskell
#+AUTHOR: C.A.L & K.M


* Language Extensions and Imports

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs
module TextProc where

import qualified Data.List as L
import qualified Data.Char as C
#+END_SRC
* Strings and Texts

# Author's note:
# I am going through this section in particular because my understanding of text 
# processing in Haskell is pretty poor

** Test Data

#+BEGIN_SRC haskell :tangle ../src/TestProc.hs

sonnet18 = "Shall I compare thee to a summer’s day? \n"
  ++ "Thou art more lovely and more temperate: \n"
  ++ "Rough winds do shake the darling buds of May, \n"
  ++ "And summer’s lease hath all too short a date: \n"
  ++ "Sometime too hot the eye of heaven shines, \n"
  ++ "And often is his gold complexion dimm’d; \n"
  ++ "And every fair from fair sometime declines, \n"
  ++ "By chance or nature’s changing course untrimm’d; \n"
  ++ "But thy eternal summer shall not fade \n"
  ++ "Nor lose possession of that fair thou owest; \n"
  ++ "Nor shall Death brag thou wander’st in his shade, \n"
  ++ "When in eternal lines to time thou growest: \n"
  ++ "  So long as men can breathe or eyes can see, \n"
  ++ "  So long lives this and this gives life to thee."

sonnet73 = "That time of year thou mayst in me behold\n"
  ++ "When yellow leaves, or none, or few, do hang\n"
  ++ "Upon those boughs which shake against the cold,\n"
  ++ "Bare ruin’d choirs, where late the sweet birds sang.\n"
  ++ "In me thou seest the twilight of such day\n"
  ++ "As after sunset fadeth in the west,\n"
  ++ "Which by and by black night doth take away,\n"
  ++ "Death’s second self, that seals up all in rest.\n"
  ++ "In me thou see’st the glowing of such fire\n"
  ++ "That on the ashes of his youth doth lie,\n"
  ++ "As the death-bed whereon it must expire\n"
  ++ "Consumed with that which it was nourish’d by.\n"
  ++ "This thou perceivest, which makes thy love more strong,\n"
  ++ "To love that well which thou must leave ere long."

#+END_SRC
** Basic Text Processing

*** Counting Frequencies 

To count frequencies of occurrences of certain features in a word/text- as in, to either (1) count the character frequency in a word, or (2) count the word frequency in a text.

These are both done by one function - a polymorphic function that can count any data type for which equality tests are possible.

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs


  count :: Eq a => a -> [a] -> Int
  count x [] = 0
  count x (y:ys) | x == y = succ (count x ys)
                 | otherwise = count x ys

#+END_SRC
*** Average

A function to compute the average of all numbers in a list.

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs

average :: [Int] -> Float
average [] = error "Empty List"
average xs = fromRational (toRational (sum xs) / toRational (length xs))

#+END_SRC

To find out the average length of words in a string.

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs

  averageLength :: String -> Float
  averageLength str = average $ map length $ words str 
#+END_SRC
*** Prefix

To check if a list A is a prefix of a list B.

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs

  prefix :: Eq a => [a] -> [a] -> Bool
  prefix [] ys = True
  prefix (x:xs) [] = False
  prefix (x:xs) (y:ys) = (x==y) && prefix xs ys

#+END_SRC

*** Sublist

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs


  sublist :: Eq a => [a] -> [a] -> Bool
  sublist [] ys = True
  sublist xs [] = False
  sublist xs ys = (prefix xs ys) || sublist xs (tail ys)
#+END_SRC
*** Duplicate Removal

Function to remove duplicates in a list.

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs

  nub :: Eq a => [a] -> [a]
  nub [] = []
  nub (x:xs) = x : nub (filter (\y -> (y /= x)) xs)

#+END_SRC
*** Preprocessing Functions

Functions to preprocess a string before analysing it.

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs

  -- to remove everything but alphanumeric characters
  preprocess :: String -> String
  preprocess = (map C.toLower) . filter (`notElem` "?;:.,")


  -- to text process given sonnets
  process :: String -> [String]
  process = L.sort . nub . words

#+END_SRC
*** Count

Count for words occurring more than once in a text.

# try to extend this to other types of sequences, like letters?

#+BEGIN_SRC haskell :tangle ../src/TextProc.hs

  cnt :: String -> [(String, Int)]
  cnt sonnet = [ (x,y) | x <- (process . preprocess) sonnet,
                 y <- [count x ((words . preprocess) sonnet)],
                 y > 1]

#+END_SRC
* Exercise on Vowel Harmony

** Question

This exercise is an example as to how we can implement linguistic-feature-based analysis using functional programming. 

Vowel harmony is the process by which all vowels in a word come to share the same features. Like, if the preceding vowel in a word is a back vowel, then the vowel used in the suffix will also be a back vowel.

The exercise is:

The vowel harmony in Yawelmani has the following shape: suffix vowels agree in backness and roundedness with the stem vowel.   However,  trigger and target of this harmony have to be of the same height.  Thus, high stem vowels condition harmony on high suffix vowels but not on low ones, and low stem vowels condition harmony only on low suffix vowels, cf. the following examples:

  xil  ++ hin  → xilhin   ‘tangles’
  dub  ++ hin  → dubhun   ‘leads by the hand'
  xat  ++ al   → xatal    ‘might eat’ 
  bok’ ++ al   → bok’ol   ‘might find’
  xat  ++ in   → xathin   ‘eats’
  bok’ ++ hin  → bok’hin  ‘finds’
  xil  ++ al   → xilal    ‘might tangle’
  dub  ++ al   → dubal    ‘might lead by the hand’


Write a function that captures the vowel harmony in Yawelmani:

appendSuffixY :: [Phoneme] -> [Phoneme] -> [Phoneme]

** Defining the Datatypes

#+BEGIN_SRC haskell :tangle ../src/vowelHarmony.hs

data Feature = F Attr Value deriving (Eq,Show)

data Attr    = Back | High | Round | Cons deriving (Eq,Show)

data Value   = Plus | Minus               deriving (Eq,Show)

type Phoneme = [Feature]

#+END_SRC
** Constructing the Yawelmani Vowel-Set

Defining the vowels with respect to their features.

#+BEGIN_SRC haskell :tangle ../src/vowelHarmony.hs

yawelmaniVowels = [i,a,o,u,e]

i = [F Cons Minus,  F High Plus,
  F Round Minus, F Back Minus]
a = [F Cons Minus,  F High Minus,
  F Round Minus, F Back Plus ]
o = [F Cons Minus,  F High Minus,
  F Round Plus,  F Back Plus ]
u = [F Cons Minus,  F High Plus ,
  F Round Plus,  F Back Plus ]
e = [F Cons Minus,  F High Minus,
  oF Round Minus, F Back Minus]

#+END_SRC

Since we are only concerned with vowels, we will define consonants using a single phoneme definition.

#+BEGIN_SRC haskell :tangle ../src/vowelHarmony.hs

c = [F Cons Plus]

#+END_SRC

Defining realisations of the phonemes in the language.

#+BEGIN_SRC haskell :tangle ../src/vowelHarmony.hs

realize :: Phoneme -> Char
realize x | x == i = 'i'
  | x == a = 'a'
  | x == o = 'o'
  | x == u = 'u'
  | x == e = 'e'
  | x == c = 'c'

#+END_SRC
** Auxiliary Functions

To extract the value of a certain feature in a phoneme:

#+BEGIN_SRC haskell :tangle ../src/vowelHarmony.hs

fValue :: Attr -> Phoneme -> Value
fValue attr [] = error "feature not found"
fValue attr ((F a v):fs) | attr == a = v
  | otherwise = fValue attr fs

#+END_SRC

For matching a certain feature in a phoneme with a certain value.

#+BEGIN_SRC haskell :tangle ../src/vowelHarmony.hs

fMatch :: Attr -> Value -> Phoneme -> Phoneme
fMatch attr value fs = map (match attr value) fs
  where match a v f@(F a’ v’) | a == a’   = F a’ v
 | otherwise = f

#+END_SRC
** Append Suffix Function

Basic steps:

(1) Check the vowel of the trigger and target.
(2) If both do not match in height, then append suffix as-is.
(3) If both match in height :
    Check if both match in all other features.
    If yes : 
      Append suffix as-is.
    Else :
      Change target to a vowel with same X feature as trigger.
    

#+BEGIN_SRC haskell :tangle ../src/vowelHarmony.hs

  -- works on the assumption that there is only
  -- one vowel in a word/suffix
  extractYVowel :: [Phoneme] -> Phoneme
  extractYVowel str = head $ filter (\ x -> (x `elem` yawelmaniVowels)) str


  appendSuffixY :: [Phoneme] -> [Phoneme] -> [Phoneme]
  appendSuffixY word [] = word
  appendSuffixY [] suffix = error "No word stem attached"
  appendSuffixY word suffix =
    let
      trigger = extractYVowel word
      target = extractYVowel suffix
    in
      case ((fValue High trigger) == (fValue High target)) of
        True  -> let
          updatedSuffix suffix =
            let vh x | (fValue x Cons) == Plus = x
                     | otherwise               = (fMatch Round (fValue Round trigger) (fMatch Back (fValue Back trigger) x))
            in map vh suffix
          in
          word ++ (updatedSuffix suffix)
        False -> word ++ suffix 

#+END_SRC
