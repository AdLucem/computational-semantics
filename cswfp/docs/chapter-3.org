#+TITLE: Functional Programming and Haskell
#+AUTHOR: C.A.L


* Language Extensions and Imports

#+BEGIN_SRC haskell :tangle ../src/count.hs

import qualified Data.List as L
import qualified Data.Char as C
#+END_SRC
* Strings and Texts

# Author's note:
# I am going through this section in particular because my understanding of text 
# processing in Haskell is pretty poor

** Sample Data

#+BEGIN_SRC haskell :tangle ../src/count.hs

sonnet18 = "Shall I compare thee to a summer’s day? \n"
  ++ "Thou art more lovely and more temperate: \n"
  ++ "Rough winds do shake the darling buds of May, \n"
  ++ "And summer’s lease hath all too short a date: \n"
  ++ "Sometime too hot the eye of heaven shines, \n"
  ++ "And often is his gold complexion dimm’d; \n"
  ++ "And every fair from fair sometime declines, \n"
  ++ "By chance or nature’s changing course untrimm’d; \n"
  ++ "But thy eternal summer shall not fade \n"
  ++ "Nor lose possession of that fair thou owest; \n"
  ++ "Nor shall Death brag thou wander’st in his shade, \n"
  ++ "When in eternal lines to time thou growest: \n"
  ++ "  So long as men can breathe or eyes can see, \n"
  ++ "  So long lives this and this gives life to thee."

sonnet73 = "That time of year thou mayst in me behold\n"
  ++ "When yellow leaves, or none, or few, do hang\n"
  ++ "Upon those boughs which shake against the cold,\n"
  ++ "Bare ruin’d choirs, where late the sweet birds sang.\n"
  ++ "In me thou seest the twilight of such day\n"
  ++ "As after sunset fadeth in the west,\n"
  ++ "Which by and by black night doth take away,\n"
  ++ "Death’s second self, that seals up all in rest.\n"
  ++ "In me thou see’st the glowing of such fire\n"
  ++ "That on the ashes of his youth doth lie,\n"
  ++ "As the death-bed whereon it must expire\n"
  ++ "Consumed with that which it was nourish’d by.\n"
  ++ "This thou perceivest, which makes thy love more strong,\n"
  ++ "To love that well which thou must leave ere long."

#+END_SRC
** Basic Text Processing

*** Counting Frequencies 

To count frequencies of occurrences of certain features in a word/text- as in, to either (1) count the character frequency in a word, or (2) count the word frequency in a text.

These are both done by one function - a polymorphic function that can count any data type for which equality tests are possible.

#+BEGIN_SRC haskell :tangle ../src/count.hs


  count :: Eq a => a -> [a] -> Int
  count x [] = 0
  count x (y:ys) | x == y = succ (count x ys)
                 | otherwise = count x ys

#+END_SRC
*** Average

A function to compute the average of all numbers in a list.

#+BEGIN_SRC haskell :tangle ../src/count.hs

average :: [Int] -> Float
average [] = error "Empty List"
average xs = fromRational (toRational (sum xs) / toRational (length xs))

#+END_SRC

To find out the average length of words in a string.

#+BEGIN_SRC haskell :tangle ../src/count.hs

  averageLength :: String -> Float
  averageLength str = average $ map length $ words str 
#+END_SRC
*** Prefix

To check if a list A is a prefix of a list B.

#+BEGIN_SRC haskell :tangle ../src/count.hs

  prefix :: Eq a => [a] -> [a] -> Bool
  prefix [] ys = True
  prefix (x:xs) [] = False
  prefix (x:xs) (y:ys) = (x==y) && prefix xs ys

#+END_SRC

*** Sublist

#+BEGIN_SRC haskell :tangle ../src/count.hs


  sublist :: Eq a => [a] -> [a] -> Bool
  sublist [] ys = True
  sublist xs [] = False
  sublist xs ys = (prefix xs ys) || sublist xs (tail ys)
#+END_SRC
*** Duplicate Removal

Function to remove duplicates in a list.

#+BEGIN_SRC haskell :tangle ../src/count.hs

  nub :: Eq a => [a] -> [a]
  nub [] = []
  nub (x:xs) = x : nub (filter (\y -> (y /= x)) xs)

#+END_SRC
*** Preprocessing Functions

Functions to preprocess a string before analysing it.

#+BEGIN_SRC haskell :tangle ../src/count.hs

  -- to remove everything but alphanumeric characters
  preprocess :: String -> String
  preprocess = (map C.toLower) . filter (`notElem` "?;:.,")


  -- to text process given sonnets
  process :: String -> [String]
  process = L.sort . nub . words

#+END_SRC
*** Count

Count for words occurring more than once in a text.

# try to extend this to other types of sequences, like letters?

#+BEGIN_SRC haskell :tangle ../src/count.hs

  cnt :: String -> [(String, Int)]
  cnt sonnet = [ (x,y) | x <- (process . preprocess) sonnet,
                 y <- [count x ((words . preprocess) sonnet)],
                 y > 1]

#+END_SRC
* Exercise on Vowel Harmony

This exercise is an example as to how we can implement linguistic-feature-based analysis using functional programming. 

Vo
